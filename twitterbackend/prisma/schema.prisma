// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String  @unique
  password String
  post Post[]
  trendingtopic TrendingTopic[]
  newstopic NewsTopic[]
  techtopic TechTopic[]
  posts Posts[]
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String  @db.Text  // Text content generated by the AI (posts)
  topic     String   // Topic (technology, arts, science, etc.)
  links     Json?  // Links in the post (optional)
  hashtags  String?  // Hashtags in the post (optional)
  createdAt DateTime @default(now()) // When the post was created
  userId    Int      // User who created the post
  user      User     @relation(fields: [userId], references: [id])
}


model TrendingTopic {
  id        Int      @id @default(autoincrement())
  topic     String   @unique  // Trending topic name
  posts     Int      // Number of posts related to the topic
  createdAt DateTime @default(now()) // Timestamp of when it was generated

  // Relation with User
  userId    Int      // User who generated the topic
  user      User     @relation(fields: [userId], references: [id])
}

model  NewsTopic{
  id  Int  @id  @default(autoincrement())
  topic String
  headlines Json
  Posts Int  @default(1111)
  createdAt DateTime @default(now())
  userId    Int      // User who generated the news
  user      User     @relation(fields: [userId], references: [id])
}

model  TechTopic{
  id  Int  @id  @default(autoincrement())
  topic String
  insights Json
  posts  Int @default(1111)
  createdAt DateTime @default(now())
  userId     Int                // User who requested this
  user       User     @relation(fields: [userId], references: [id])
}

model Posts {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  topic     String
  links     Json?    // Optional links
  hashtags  String?  // Optional hashtags
  media     Json?    // Array of media: { type: 'image' | 'video', url: string }
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
